// los recursos se deben agregar en /src/main/resources/META-INF/resources/frontend/...
// https://vaadin.com/blog/vaadin-10-and-static-resources

// DSL Gradle 7.0
plugins {
    id 'java-library'
    // https://plugins.gradle.org/plugin/net.researchgate.release
    // id 'net.researchgate.release' version '2.8.1'
    // https://plugins.gradle.org/plugin/nu.studer.credentials
    id 'nu.studer.credentials' version '3.0'
    // https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    // id 'io.codearte.nexus-staging' version '0.30.0'

    //https://github.com/gradle-nexus/publish-plugin/
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"

    id 'maven-publish'
    id 'signing'

    id 'org.gretty' version '4.1.5'
}


def sonatypeUsername = credentials.forKey("sonatypeUser")
def sonatypePassword = credentials.forKey("sonatypePassword")

def vaadinVersion = "14.12.0"

description = rootProject.name

// ejecutar: gradle idea 
// para que inicialize el proyecto y baje los javadocs.
apply plugin: 'idea'
idea{
    module{
        downloadJavadoc=true
    }
}

// desactivo la generación de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

println "***************************************************************"
println "SISTEMA: " + name
println "VERSION: " + version
println "***************************************************************"
import java.text.SimpleDateFormat
def getCurrentTimestamp ()
{
    Date today = new Date ()
    SimpleDateFormat df = new SimpleDateFormat ("dd/MM/yyyy hh:mm:ss")
    return df.format (today)
}

println getCurrentTimestamp()
println "---------------------------------------------------------------"
// incrementar automáticamente el buildNumber
task autoBuildNumber {
    doFirst {
        println "autobuild number....."
        File propertiesFile = new File('gradle.properties')
        def lines = propertiesFile.readLines()

        PrintWriter printWriter = new PrintWriter(propertiesFile)
        String versionNumber = ""
        lines.each {String line ->
            if (line.startsWith("version") ){
                versionNumber = line.tokenize("=")[1]
                String[] versionParts = versionNumber.tokenize(".")
                // recalcular el build 
                versionNumber = versionParts[0]+\
                                '.'+versionParts[1]+\
                                '.'+versionParts[2]+
                                '.'+( versionParts.length==4 ? (versionParts[3].toInteger()+1).toString():"1")
                
                line = "version="+versionNumber
                //                println line
            }
            printWriter.println(line)
        }
        printWriter.close()

    }
}
// saltar autoBuildNumber
// agregar esta tarea para que no se incremente el valor.
task sabn{}


// agregar la dependencia solo si no se trata de un release
if (! (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")
       || project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("sabn")) 
   ) {
    build.configure{dependsOn autoBuildNumber} 
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven {
        url "https://mvnrepository.com/artifact/com.vaadin/vaadin"
    }

}

dependencies {
    implementation("com.vaadin:vaadin-core:${vaadinVersion}")
    implementation("org.json:json:20240303")
    
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}


jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
    
    into("META-INF/maven/$project.group/$project.name") {
        File pomProperites = new File("pom.properties")
        pomProperites.write("version:"+version+"\n")
        pomProperites << "groupId: $project.group\n"
        pomProperites << "artifactId: $artifactId\n"
        
        from("pom.properties")
    }
    
    manifest {
        attributes(
            "Manifest-Version": "1.0",
            "Vaadin-Package-Version": "1",
            "Vaadin-Addon": artifactId+"-"+version+".jar",
            "Implementation-Vendor": "MarceloDRe",
            "Implementation-Title": "$title",
            "Implementation-Version": "$version"
      
        )
    }
    
}


//create a single Jar with all dependencies - DSL 7.0
// task fatJar(type: Jar) {
//     archiveBaseName = project.name + '-all'
//     duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//     from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//     with jar
// }

//===============================================================================
// Vaadin Directory stuff
//===============================================================================
ext.copyFile = {String srcF, String destF ->
    File src = new File(srcF)
    File dest = new File(destF)
    if (src.isFile()) {
        dest << src.bytes
    } else {
        throw new Exception("el archivo "+srcF+" no existe!")
    }
}

task createVaadinDirectoryRelease(type: Zip) {
    if (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("createvaadindirectoryrelease")) {
        group = 'Welcome'
        description = 'Crear un paquete para subir a Vaadin Directory'
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
        print "Ingrese la versión a utilizar (Version actual: ${version}): "

        def targetVersion = br.readLine()

        if (!targetVersion) {
            targetVersion = version
        }
        println "preparando el paquete..."
            
        String VAADINDIRECTORY = "toVaadinDirectory"
        String vaadinDistDir = VAADINDIRECTORY+"/dist"
        
        File toVaadinDirectory = new File(VAADINDIRECTORY)
        File fVaadinDistDir = new File(vaadinDistDir)
        File vdMetaInf = new File(vaadinDistDir+"/META-INF")
        // borrar cualquier referencia previa
        if (toVaadinDirectory.isDirectory()) {
            toVaadinDirectory.deleteDir()
        }
        // crear el directorio
        toVaadinDirectory.mkdir()
        fVaadinDistDir.mkdir()
        vdMetaInf.mkdir()
        
        // crear el manifest
        println "creando el manifest..."
        File vdManifest = new File(vaadinDistDir+"/META-INF/MANIFEST.MF")
        vdManifest.write("Manifest-Version: 1.0\n")
        vdManifest << "Vaadin-Package-Version: 1\n"
        vdManifest << "Vaadin-Addon: SigmaWrapper-"+targetVersion+".jar\n"
        vdManifest << "Implementation-Vendor: MarceloDRe \n"
        vdManifest << "Implementation-Title: Sigma.js wapper for Vaadin Flow 14.+\n"
        vdManifest << "Implementation-Version: "+targetVersion+"\n"
        
        // copiar los archivos al directorio
        // requiere jar, sourceJar y javadoc y le readme.md
        println "copiando los archivos..."
        copyFile("build/libs/"+project.name+"-"+targetVersion+".jar", vaadinDistDir+"/"+project.name+"-"+targetVersion+".jar")
        copyFile("build/libs/"+project.name+"-"+targetVersion+"-sources.jar", vaadinDistDir+"/"+project.name+"-"+targetVersion+"-sources.jar")
        copyFile("build/libs/"+project.name+"-"+targetVersion+"-javadoc.jar", vaadinDistDir+"/"+project.name+"-"+targetVersion+"-javadoc.jar")
        copyFile("./README.md", vaadinDistDir+"/README.md")
        
        println "comprimiendo..."
        // crear el zip para subir
        // parámetros específicos del task Zip
        archiveName = project.name+"-"+targetVersion+".zip"
        destinationDir = file(VAADINDIRECTORY)

        from vaadinDistDir
        println "finalizado."
    }
}


java {
    withJavadocJar()
    withSourcesJar()
}


nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            //artifactId = 'my-library'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "$title"
                packaging = 'jar'
                // optionally artifactId can be defined here 
                description = "$title"
                url = 'https://github.com/mdre/sigma-wrapper'

                // properties = [
                //     myProp: "value",
                //     "prop.with.dots": "anotherValue"
                // ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mdre'
                        name = 'Marcelo D. RE'
                        email = 'marcelo.re@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/mdre/sigma-wrapper.git'
                    developerConnection = 'scm:git:ssh://github.com/mdre/sigma-wrapper.git'
                    url = 'https://github.com/mdre/sigma-wrapper'
                }
            }
        }
    }
    
}

signing {
    sign publishing.publications.maven
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        // resources {
        //     srcDirs = ['src/test/resources']
        // }
    }
}

println sourceSets.test.runtimeClasspath


gretty {
    contextPath = '/'
    servletContainer = 'jetty11'
    httpPort = 8080
    inplaceMode = 'soft' // Permite la recarga automática
    managedClassReload = true // Recarga las clases en tiempo de ejecución
    scanDir "/home/mdre/Proyectos/WEB/Flow/sigmawrapper/src/test/java/webapp"
}

project.afterEvaluate {
    tasks.named('appRun') {
        sourceSets.test.runtimeClasspath.each { classPath it}
        // classPath += sourceSets.test.runtimeClasspath
    }
}


// tasks.named('test') {
//     // dependsOn testClasses
//     // classpath += sourceSets.test.runtimeClasspath
// }